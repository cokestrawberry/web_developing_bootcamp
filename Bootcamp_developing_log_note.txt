--- Udemy에서 <100 Days Web Developing Bootcamp Challenge> 강의를 들으면서 진행 결과를 기록하기 위한 문서 ---

2023/01/13

  - 처음 시작하자 마자 git으로 버전 관리를 진행하려고 했는데 git & github 사용법을 익히느라 좀 늦었다.
  - 그러고 나서도 다음달 여행가는거랑 기타 등등 때문에 공부에 신경으 못써서 며칠 더 낭비함
  - 컴활 1급 실기랑 같이 건들고 있는 중이라 솔직히 매일 할 수 있을지는 모르겠지만 잔디밭 관리를 위해서라면 듣고있는 강의가 하나씩 지날때마다 커밋&푸쉬 하면 괜찮을지도..?
  - 일단 오늘은 며칠 밀린거 한번에 들어서 & 알바 면접 전에 시간이 좀 남아서 진행 내용이 많을 듯...


  *** 기억할 내용 ***

  - anchor 요소 스타일링 (마우스 반응 같은거)
  - void 요소 구문 (css 요소 외부 파일화 하기 & link 연결하기)
  - ID 선택자로 선택한 특정 요소들에만 연결하는 방식의 css 코드 적용
  - font 설정
  - Google font 받아와서 내 웹페이지에 적용하기
  - 내 웹페이지에 이미지 추가하기
  - 이미지 스타일링 하기
  - 배경색 / 여백 지정

2023/01/17

  - 또 한동안 개발 공부는 안건드려서 안되겠다 싶어서 카공
  - 부트캠프 과정 중 처음으로 과제 진행(상호 링크 페이지)
  - 강의를 올린 웅진쪽에서 매일매일 수강 이벤트를 하는데, 기간안에 완강 하려면 하루에 3일치 씩은 들어야 할 것 같음
  - 그래봤자 3시간이라 무리는 아닌데.. 중요한건 마음이 꺾이지 않는것..!
  - 작심 하루를 365번 하면 작심 1년이 된다는 생각


  *** 기억할 내용 ***

  - 공유 css 파일
  - 이미지와 css에 대해 각각의 폴더 생성 후 각 폴더별로 소스파일 정리
  - 리스트
  - 부모-자식 관계 & 상속
  - css 상속 모델
    - 상속 (inheritance)
    - 계단식 모델 (css stands for "Casacading" Style Sheets)
    - 우선순위 (ordered with specificity)
  - css 박스 모델
    - 내용 (contents)
    - 테두리 (border)
    - 패딩 (padding)
    - 여백 (margin)
  - html 레이아웃
    - header
    - main
    - footer

2023/01/18

  - 매일 수강 이벤트 2일차
  - 또 사자 메타를 하다가(밀림의 왕 이라는 뜻) 부랴부랴 오늘차 강의를 듣기 시작함
  - 아무렴 어떠냐 해내면 그만이지

  *** 기억할 내용 ***

  - 선택자 & 결합자
    - 선택자
      - Type (h1, p, ...) : element_name
      - ID : #id
      - Group : element_name,element_name
      - Class : .class_name
    - 결합자
      - descendant -> li <p> -> all <p> with li as ancestor
      - child -> h2 > <p> -> only <p> which are direct child of h2
    - 클래스
      - 요소들을 묶어서 별명(?) 같은걸 부여하는 듯?
      - 그럼 그룹이랑 무슨 차이지..?
        - 그룹은 그냥 여러가지 선택자들을 같이 쓰는거였음 ㅋㅋ
      - 클래스는 ID랑 비교해야 하는데
        ID가 해당 id를 부여받은 한 가지 요소에 적용되는 것이라면,
        클래스는 해당 클래스에 소속된 모든 요소들에 적용됨
  - 블록(레벨) 요소 & 인라인 요소
    - 두 h1 요소
      - 서로 다른줄에 나타남 (자동 행 갈이)
    - 두 anchor (ex : a, img, button, span, ...) 요소
      - 같은 줄에 연결 되어서 나타남
      - 차이가 무엇일까?
    - 블록 요소와 인라인 요소의 차이점
      - 블록 요소는 웹페이지의 모든 너비를 모두 사용함
        - 따라서 각각의 요소마다 다른 줄에 존재함
      - 인라인 요소는 지역적으로 존재 가능
        - 이름 그대로 블록 요소의 한 라인 안에 존재 <- 블록 요소의 text(contents)처럼 취급됨
